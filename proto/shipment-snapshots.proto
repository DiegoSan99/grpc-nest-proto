syntax = "proto3";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "shipment.proto";

package core.services.shipment_snapshots;

option go_package = "github.com/99minutos/pbcommons/core/services/shipments-snapshots";

service ShipmentsSnapshot {
  rpc GetShipment(GetShipmentRequest) returns (Shipment) {}
  rpc GetShipments(GetShipmentsRequest) returns (GetShipmentsResponse) {}
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse) {}
}

message Event {
  string event_name = 1;
  string status_code = 2;
  string status_name = 3;
  google.protobuf.Struct data = 4;
  google.protobuf.Struct  metadata = 5;
  google.protobuf.Timestamp created_at = 6;
}

message DateInterval {
  string start = 1;
  string finish = 2;
}

message PageCursor {
  int32 page_size = 1;
  int32 page = 2;
}

// -----  Requests  -----
message GetShipmentRequest {
  string tracking_id = 1;

  //  optional string internal_key = 2;
  //  optional string client_id = 3;
}

message GetShipmentsRequest {
  optional DateInterval interval_dates = 1;
  optional string client_id = 2;
  optional string delivery_type = 3;
  repeated string status = 4;
  PageCursor page_cursor = 30;
}

message GetEventsRequest {
  string tracking_id = 1;
  //  optional string internal_key = 2; //validacion adicional, si hay dos clientes con dos internal key iguales
}

message GetShipmentsResponse {
  repeated Shipment shipments = 1;
  int32 total_pages = 2;
}

message GetEventsResponse {
  repeated Event events = 1;
}

message GetStatusReportRequest {
  string status = 1;
  DateInterval between_dates = 2;
  optional int32 chunk = 3;
}
